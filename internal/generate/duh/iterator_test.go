package duh_test

import (
	"os"
	"path/filepath"
	"testing"

	duh "github.com/duh-rpc/duh-cli"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestGenerateDuhCreatesIteratorWithListOps(t *testing.T) {
	specPath, stdout := setupTest(t, specWithListOp)
	tempDir := filepath.Dir(specPath)

	exitCode := duh.RunCmd(stdout, []string{"generate", "duh", specPath})

	require.Equal(t, 0, exitCode)
	assert.Contains(t, stdout.String(), "✓")
	assert.Contains(t, stdout.String(), "iterator.go")

	_, err := os.Stat(filepath.Join(tempDir, "iterator.go"))
	require.NoError(t, err)
}

func TestGenerateDuhSkipsIteratorWithoutListOps(t *testing.T) {
	specPath, stdout := setupTest(t, simpleValidSpec)
	tempDir := filepath.Dir(specPath)

	exitCode := duh.RunCmd(stdout, []string{"generate", "duh", specPath})

	require.Equal(t, 0, exitCode)
	assert.Contains(t, stdout.String(), "✓")
	assert.NotContains(t, stdout.String(), "iterator.go")

	_, err := os.Stat(filepath.Join(tempDir, "iterator.go"))
	require.Error(t, err)
	require.True(t, os.IsNotExist(err))
}

func TestIteratorStructure(t *testing.T) {
	specPath, stdout := setupTest(t, specWithListOp)
	tempDir := filepath.Dir(specPath)

	exitCode := duh.RunCmd(stdout, []string{"generate", "duh", specPath})

	require.Equal(t, 0, exitCode)

	iteratorContent, err := os.ReadFile(filepath.Join(tempDir, "iterator.go"))
	require.NoError(t, err)

	content := string(iteratorContent)

	assert.Contains(t, content, "type Page[T any] struct")
	assert.Contains(t, content, "type Iterator[T any] interface")
	assert.Contains(t, content, "type PageFetcher[T any] interface")
	assert.Contains(t, content, "type GenericIterator[T any] struct")
	assert.Contains(t, content, "func NewGenericIterator[T any]")

	assert.NotContains(t, content, "//go:build")
	assert.Contains(t, content, "Code generated by 'duh generate'")
	assert.Contains(t, content, "DO NOT EDIT")
	assert.Contains(t, content, "package api")

	assert.Contains(t, content, "ctx.Done()")
	assert.Contains(t, content, "it.err = ctx.Err()")
	assert.Contains(t, content, "func (it *GenericIterator[T]) Next(ctx context.Context, page *Page[T]) bool")
	assert.Contains(t, content, "func (it *GenericIterator[T]) Err() error")
}
