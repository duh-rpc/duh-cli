# DUH-RPC Compliant OpenAPI Specification Template
# This template demonstrates all DUH-RPC requirements and best practices

openapi: 3.0.3
info:
  title: DUH-RPC Example API
  description: A comprehensive example of a DUH-RPC compliant API specification
  version: 1.0.0

# DUH-RPC Path Requirements:
# - Must follow format: /v{N}/{subject}.{method}
# - Version must be an integer (v0, v1, v2, etc.)
# - Subject and method must be lowercase alphanumeric with optional hyphens/underscores
# - Must start with a letter
# - Maximum 50 characters each
# - No path parameters allowed
paths:
  # Example 1: Basic create endpoint with JSON and protobuf support
  /v1/users.create:
    post:  # DUH-RPC Rule: Only POST method is allowed
      summary: Create a new user
      description: Creates a new user account in the system
      operationId: createUser
      # DUH-RPC Rule: Request body is required
      requestBody:
        required: true  # This must be true
        content:
          # DUH-RPC Rule: application/json is required, others are optional
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
          # Optional: Protocol Buffers support
          application/protobuf:
            schema:
              type: string
              format: binary
      responses:
        # DUH-RPC Rule: Must have a 200 success response
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
            application/protobuf:
              schema:
                type: string
                format: binary
        # DUH-RPC Rule: Valid error status codes are 400-404, 429, 452-455, 500
        '400':
          description: Bad request - invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests - rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Example 2: Retrieval endpoint with identifier in request body
  /v1/users.get:
    post:  # Even for retrievals, DUH-RPC uses POST
      summary: Get user by ID
      description: Retrieves a user's details by their unique identifier
      operationId: getUserById
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetUserRequest'
          application/protobuf:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: User found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
            application/protobuf:
              schema:
                type: string
                format: binary
        '400':
          description: Invalid user ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Example 3: List endpoint with pagination
  /v1/users.list:
    post:
      summary: List users with pagination
      description: Retrieves a paginated list of users
      operationId: listUsers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListUsersRequest'
          application/protobuf:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUsersResponse'
            application/protobuf:
              schema:
                type: string
                format: binary
        '400':
          description: Invalid pagination parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Example 4: Update endpoint demonstrating additional status codes
  /v1/users.update:
    post:
      summary: Update a user
      description: Updates an existing user with new information
      operationId: updateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
          application/protobuf:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateUserResponse'
            application/protobuf:
              schema:
                type: string
                format: binary
        '400':
          description: Invalid user data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '453':
          description: Custom business error - user account locked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

# Reusable schemas for request and response bodies
components:
  schemas:
    # DUH-RPC Rule: Error schema must have 'code' (integer) and 'message' (string)
    # The 'details' field is optional
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          description: Error code
          example: 1001
        message:
          type: string
          description: Human-readable error message
          example: "Invalid input: email is required"
        details:
          $ref: '#/components/schemas/ErrorDetails'

    ErrorDetails:
      type: object
      description: Optional additional error details
      additionalProperties:
        type: string

    # User-related schemas
    CreateUserRequest:
      type: object
      required:
        - email
        - name
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        name:
          type: string
          example: "John Doe"
        age:
          type: integer
          minimum: 0
          example: 30

    CreateUserResponse:
      type: object
      required:
        - userId
        - email
        - name
      properties:
        userId:
          type: string
          example: "usr_abc123"
        email:
          type: string
          example: "user@example.com"
        name:
          type: string
          example: "John Doe"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    GetUserRequest:
      type: object
      required:
        - userId
      properties:
        userId:
          type: string
          example: "usr_abc123"

    UserResponse:
      type: object
      required:
        - userId
        - email
        - name
      properties:
        userId:
          type: string
          example: "usr_abc123"
        email:
          type: string
          example: "user@example.com"
        name:
          type: string
          example: "John Doe"
        age:
          type: integer
          example: 30
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    # User list schemas
    ListUsersRequest:
      type: object
      properties:
        limit:
          type: integer
          minimum: 1
          maximum: 100
          default: 20
          example: 20
        offset:
          type: integer
          minimum: 0
          default: 0
          example: 0
        sortBy:
          type: string
          enum: [name, email, createdAt]
          default: createdAt
          example: "name"

    ListUsersResponse:
      type: object
      required:
        - users
        - total
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserResponse'
        total:
          type: integer
          description: Total number of users
          example: 150
        hasMore:
          type: boolean
          description: Whether more results are available
          example: true

    # User update schemas
    UpdateUserRequest:
      type: object
      required:
        - userId
      properties:
        userId:
          type: string
          example: "usr_abc123"
        name:
          type: string
          example: "Jane Doe"
        email:
          type: string
          format: email
          example: "jane@example.com"
        age:
          type: integer
          minimum: 0
          example: 35
        status:
          type: string
          enum: [active, inactive, suspended]
          example: "active"

    UpdateUserResponse:
      type: object
      required:
        - userId
        - email
        - name
      properties:
        userId:
          type: string
          example: "usr_abc123"
        email:
          type: string
          example: "jane@example.com"
        name:
          type: string
          example: "Jane Doe"
        age:
          type: integer
          example: 35
        status:
          type: string
          example: "active"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-15T14:45:00Z"
