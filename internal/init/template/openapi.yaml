# DUH-RPC Compliant OpenAPI Specification Template
# This template demonstrates all DUH-RPC requirements and best practices

openapi: 3.0.3
info:
  title: DUH-RPC Example API
  description: A comprehensive example of a DUH-RPC compliant API specification
  version: 1.0.0

# DUH-RPC Path Requirements:
# - Must follow format: /v{N}/{subject}.{method}
# - Version must be an integer (v0, v1, v2, etc.)
# - Subject and method must be lowercase alphanumeric with optional hyphens/underscores
# - Must start with a letter
# - Maximum 50 characters each
# - No path parameters allowed
paths:
  # Example 1: Basic create endpoint with JSON and protobuf support
  /v1/users.create:
    post:  # DUH-RPC Rule: Only POST method is allowed
      summary: Create a new user
      description: Creates a new user account in the system
      operationId: createUser
      # DUH-RPC Rule: Request body is required
      requestBody:
        required: true  # This must be true
        content:
          # DUH-RPC Rule: application/json is required, others are optional
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
          # Optional: Protocol Buffers support
          application/protobuf:
            schema:
              type: string
              format: binary
      responses:
        # DUH-RPC Rule: Must have a 200 success response
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
            application/protobuf:
              schema:
                type: string
                format: binary
        # DUH-RPC Rule: Valid error status codes are 400-404, 429, 452-455, 500
        '400':
          description: Bad request - invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests - rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Example 2: Retrieval endpoint with identifier in request body
  /v1/users.get-by-id:
    post:  # Even for retrievals, DUH-RPC uses POST
      summary: Get user by ID
      description: Retrieves a user's details by their unique identifier
      operationId: getUserById
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetUserRequest'
      responses:
        '200':
          description: User found and returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid user ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Example 3: Version 2 API with different endpoint pattern
  /v2/products.create:
    post:
      summary: Create a new product
      description: Creates a new product in the catalog (v2 API with enhanced features)
      operationId: createProductV2
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
          # Demonstrating binary data support
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '400':
          description: Invalid product data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '452':
          description: Business rule violation - custom status code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Example 4: List endpoint with pagination
  /v2/products.list:
    post:
      summary: List products with pagination
      description: Retrieves a paginated list of products
      operationId: listProducts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListProductsRequest'
      responses:
        '200':
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProductsResponse'
        '400':
          description: Invalid pagination parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Example 5: Update endpoint demonstrating additional status codes
  /v1/orders.update:
    post:
      summary: Update an order
      description: Updates an existing order with new information
      operationId: updateOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrderRequest'
      responses:
        '200':
          description: Order updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '400':
          description: Invalid order data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '453':
          description: Custom business error - order already shipped
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

# Reusable schemas for request and response bodies
components:
  schemas:
    # DUH-RPC Rule: Error schema must have 'code' (integer) and 'message' (string)
    # The 'details' field is optional
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          description: Error code
          example: 1001
        message:
          type: string
          description: Human-readable error message
          example: "Invalid input: email is required"
        details:
          type: object
          description: Optional additional error details
          additionalProperties: true

    # User-related schemas
    CreateUserRequest:
      type: object
      required:
        - email
        - name
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        name:
          type: string
          example: "John Doe"
        age:
          type: integer
          minimum: 0
          example: 30

    CreateUserResponse:
      type: object
      required:
        - userId
        - email
        - name
      properties:
        userId:
          type: string
          example: "usr_abc123"
        email:
          type: string
          example: "user@example.com"
        name:
          type: string
          example: "John Doe"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    GetUserRequest:
      type: object
      required:
        - userId
      properties:
        userId:
          type: string
          example: "usr_abc123"

    UserResponse:
      type: object
      required:
        - userId
        - email
        - name
      properties:
        userId:
          type: string
          example: "usr_abc123"
        email:
          type: string
          example: "user@example.com"
        name:
          type: string
          example: "John Doe"
        age:
          type: integer
          example: 30
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    # Product-related schemas
    CreateProductRequest:
      type: object
      required:
        - name
        - price
      properties:
        name:
          type: string
          example: "Premium Widget"
        description:
          type: string
          example: "A high-quality widget for all your needs"
        price:
          type: number
          format: double
          minimum: 0
          example: 29.99
        sku:
          type: string
          example: "WIDGET-001"

    ProductResponse:
      type: object
      required:
        - productId
        - name
        - price
      properties:
        productId:
          type: string
          example: "prod_xyz789"
        name:
          type: string
          example: "Premium Widget"
        description:
          type: string
          example: "A high-quality widget for all your needs"
        price:
          type: number
          format: double
          example: 29.99
        sku:
          type: string
          example: "WIDGET-001"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    ListProductsRequest:
      type: object
      properties:
        limit:
          type: integer
          minimum: 1
          maximum: 100
          default: 20
          example: 20
        offset:
          type: integer
          minimum: 0
          default: 0
          example: 0
        sortBy:
          type: string
          enum: [name, price, createdAt]
          default: createdAt
          example: "name"

    ListProductsResponse:
      type: object
      required:
        - products
        - total
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/ProductResponse'
        total:
          type: integer
          description: Total number of products
          example: 150
        hasMore:
          type: boolean
          description: Whether more results are available
          example: true

    # Order-related schemas
    UpdateOrderRequest:
      type: object
      required:
        - orderId
      properties:
        orderId:
          type: string
          example: "ord_def456"
        status:
          type: string
          enum: [pending, processing, shipped, delivered, cancelled]
          example: "processing"
        shippingAddress:
          type: object
          properties:
            street:
              type: string
              example: "123 Main St"
            city:
              type: string
              example: "Springfield"
            state:
              type: string
              example: "IL"
            zipCode:
              type: string
              example: "62701"

    OrderResponse:
      type: object
      required:
        - orderId
        - status
        - total
      properties:
        orderId:
          type: string
          example: "ord_def456"
        status:
          type: string
          example: "processing"
        total:
          type: number
          format: double
          example: 159.97
        items:
          type: array
          items:
            type: object
            properties:
              productId:
                type: string
                example: "prod_xyz789"
              quantity:
                type: integer
                example: 2
              price:
                type: number
                format: double
                example: 29.99
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-15T14:45:00Z"
